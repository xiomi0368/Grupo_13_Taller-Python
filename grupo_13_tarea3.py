# -*- coding: utf-8 -*-
"""GRUPO_13_Tarea3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OhQAGaxW-q72UBaVkDLE5YjtUwgyK5g2

Ejercicio 1
"""

from scipy import stats


num_lanzamientos = 10
p_exito = 0.5
k = 7

prob_exacta = stats.binom.pmf(k, num_lanzamientos, p_exito)
print(f'Probabilidad de obtener exactamente {k} caras en {num_lanzamientos} lanzamientos con p={p_exito}: {prob_exacta:.4f}')

"""ejercicio 2"""

import scipy.stats as stats

num_lanzamientos = 10
p_exito = 0.5
k = 7

prob_acumulada = stats.binom.cdf(k, num_lanzamientos, p_exito)
print(f'Probabilidad acumulada de obtener 7 o menos caras en {num_lanzamientos} lanzamientos es: {prob_acumulada:.5f}')

"""ejercicio 3"""

import matplotlib.pyplot as plt
x= range(11)
probabilidad = stats.binom.pmf(x,n_lanzamientos,p_exito)
plt.bar(x,probabilidad, color='blue')
plt.xlabel('número de caras')
plt.ylabel('probabilidad')
plt.title('Distribución binomial: 10 lanzamientos de una moneda sin trucos')
plt.show()

"""ejercicio 4"""

p_exito=0.8
n_lanzamientos=10
k=7
prob_exacta = stats.binom.pmf(k, n_lanzamientos, p_exito)

print(f'Probabilidad de obtener exactamente {k} caras en {n_lanzamientos} lanzamientos con p={p_exito}: {prob_exacta:.4f}')

n_lanzamientos = 10
p_exito = 0.8
k = 7

# Calcular la probabilidad acumulada de obtener 7 o menos éxitos
prob_acumulada = stats.binom.cdf(k, n_lanzamientos, p_exito)

print(f'Probabilidad acumulada de obtener {k} o menos caras en {n_lanzamientos} lanzamientos con p={p_exito}: {prob_acumulada:.4f}')

import matplotlib.pyplot as plt
from scipy import stats

n_lanzamientos = 10
p_exito = 0.8
k_values = range(0, 11)


probabilidades = [stats.binom.pmf(k, n_lanzamientos, p_exito) for k in k_values]


plt.figure(figsize=(10, 6))
plt.bar(k_values, probabilidades, color='skyblue')
plt.xlabel('Número de Caras (k)')
plt.ylabel('Probabilidad')
plt.title('Distribución Binomial: Probabilidad de obtener desde 0 hasta 10 caras\n en 10 lanzamientos con p=0.8')
plt.xticks(k_values)
plt.grid(True)
plt.show()

"""ejercicio 5"""

from scipy.stats import norm
datos=norm.rvs(0,1,1000)
print(datos)

"""ejercicio 6"""

import numpy as np
media=np.mean(datos)
print(media)
desviacion_estandar = np.std(datos)
print(desviacion_estandar)#:000000000000000000000000000000
mediana = np.median(datos)
print(mediana)

"""ejercicio 7"""

import matplotlib.pyplot as plt
plt.hist(datos,bins=30,density=True)
xmin,xmax=plt.xlim()

x=np.linspace(xmin,xmax,100)
p=stats.norm.pdf(x,0,1)
plt.plot(x,p,'k',linewidth=2)
plt.show()

"""ejercicio 8"""

from scipy.stats import stats

media=0
desviacion_estandar=1

prob_rango = stats.norm.cdf(1, media, desviacion_estandar) - stats.norm.cdf(-1, media, desviacion_estandar)
print(f'probabilidad de que un valor caiga dentro del rango de una desviacion estandar de la media: {prob_rango:.4f}')